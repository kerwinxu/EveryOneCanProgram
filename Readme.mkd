# 前言
**我的目标是做一个软件，纯粹用图形来编程，并且有一个版本是可以动态执行的，最重要的是尽量简单。**

首先说程序，有多种理解   
   - 面向过程，程序是数据加算法
     - 数据 ： 分简单类型的数据和复合类型的数据
       - 简单类型的数据 ： 比如整数、浮点数、字符、字节等。
       - 复合类型的数据 ： 内部有多种简单类型的数据，比如类，结构等。
     - 算法 ： 调用已有的算法吧，
   - 面向对象，浅显的认识是将一些数据和算法封装成一个类，然后是继承等。
   - 函数式编程 ： 一个函数接受另一个函数的输入，然后输出结果给另一个函数，相当于管道
     - 例子：比如有3个函数
       - 1. 输出某个文件夹下所有的文件信息。
       - 2. 筛选文件尺寸大于1M的文件。
       - 3. 显示这些文件的信息，比如格式是“名字+文件尺寸”的。
   - 程序结构
     - 顺序执行 ： 依次执行语句
     - 判断执行 ： 根据判断结果选择执行
     - 循环执行 ： 就是循环啊。

整理一下需要实现的语法

# 简单语法

在c#中，// 表示单行注释符号，这一行的后边全部是注释，我这里暂时用这种方法写注释。 如下的语法中<>内包括的是要被替换的

## using
一个项目可以引入别的项目的东西，比如引入别的动态链接库，这个是两步的，第一步是引入别的项目或者dll，第二步是在需要源文件头部添加“using 命名空间”。

## 数据类型
### 简单数据类型（值类型）

|类型|描述|字节数|范围|
|--|--|--|--|
|bool|布尔值（真或者假）||true或者false（都是小写）|
|byte|8位无符号整数|1|0~255|
|sbyte|8位有符号整数|1|-128 到 127|
|char|16位Unicode字符|2|U +0000 到 U +ffff|
|short|16位有符号整数|2|-32,768 到 32,767|
|ushort|16位无符号整数|2|0 到 65,535|
|int|32位有符号整数|4|-2,147,483,648 到 2,147,483,647|
|uint|32位无符号整数|4|0 到 4,294,967,295|
|long|64位有符号整数|8|-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807|
|ulong|64位无符号整数|8| 到 18,446,744,073,709,551,615|
|float|32位浮点数|4|$-3.4*10^{38}\sim3.4*10^{38}$
|double|64位浮点数|8|$(+/-)5.0*10^{-324}\sim(+/-)5.0*10^{-308}$
|decimal|128位精确十进制值|16| $-7.9*10^{28}\sim7.9*10^{28}或者10^{0\sim28}$|

简单讲，是分布尔值，各种整数，字符型，浮点数。

### 引用类型
包括三种，一种是object（对象），dynamic （动态）和string（字符串）
#### object 对象
类的实例化，内部往往有多个数据以及操作数据的方法，关于类，以后单独一个章节讲解。
####  dynamic
简略的不需要了解，我自己都没用过。
#### string
是System.String类，但因为这个太常用，所以特别提取出来，用如下的符号创建，双引号和@符号，区别是@""中的转义字符被当作普通字符来对待，还有内部的2个双引号会被转成双引号。  
比如如下的
   - "hello\tworld" => hello world ，这个\t是制表符，效果类似多个空格（可调节）
   - @"hello\tworld" => hello\tworld , 原样输出，不做转义。

## 运算符
运算符可以分为算术运算符，比较运算符，布尔逻辑运算符，位运算符和移位运算符，相等运算符。
### 算数运算符
   - + 加法
   - - 简繁
   - * 乘法
   - / 除法
   - % 取余数（整数专用）
   - ++ 自增
   - -- 自减

### 比较运算符
   - < 小于
   - <= 小于等于
   - > 大于
   - >= 大于等于
   - == 等于
   - != 不等于

### 布尔运算符和位运算符

如下的位运算符是相对于整数来做的。  
|运算符|布尔运算符|位运算符|
|--|--|--|
|&|逻辑and|按位and|
|\||逻辑or|按位or|
|^|逻辑xor|按位xor|
|!|逻辑非||

如下的是专门的条件运算符
   - && ： 表示逻辑and
   - || ： 表示条件or

### 移位操作符
   - ~ ： 按位求补
   - << 左移， >> 右移， >>> 无符号右移
   - & 按位与，|按位或，^按位异或

### 等于运算符
通常"int a;a=1"，后边的等于是赋值运算符，是将1赋值给a，但如果是"a=a+1"，表示将"a+1"重新赋值给a，可以简写这种，"a+=1"，算数运算符和位运算符，都有相关的简写。

### 类型运算符
#### is 
检查表达式结果的运行时类型是否与给定类型兼容
#### as
类型转换
#### 强制转换
跟上一个一样，区别是这可能会引发异常。
#### typeof
获得类型

## 循环语句
### for
for(初始值;继续循环的条件;语句执行后的操作)
```
for (int i = 0; i < 3; i++)
{
  // 语句
}
```
### foreach
遍历
```
var fibNumbers = new List<int> { 0, 1, 1, 2, 3, 5, 8, 13 };
foreach (int element in fibNumbers)
{
    Console.Write($"{element} ");
}
// Output:
// 0 1 1 2 3 5 8 13
```
### do
```
int n = 0;
do
{
    Console.Write(n);
    n++;
} while (n < 5);
// Output:
// 01234
```
### while
```
int n = 0;
while (n < 5)
{
    Console.Write(n);
    n++;
}
// Output:
// 01234
```
### break和continue
在迭代语句体中的任何点，都可以使用 break 语句跳出循环。 可以使用 continue 语句进入循环中的下一个迭代。

### 循环总结
   - for 循环大多是执行指定的次数。
   - do 循环至少执行一次。
   - while 循环，可能一次都不执行。
   - foreach ，这个是枚举集合，专业的输入是实现System.Collections.IEnumerable 或 System.Collections.Generic.IEnumerable<T>接口的。

## 条件语句
### if else
```
if (条件)
{
  // 成功后执行的语句
}else{
  // 失败后执行的语句
}
```
### switch
```
switch(<变量>)
{
  case <值1>:   // 注意这个值1得是一个常量（不变化的）
    // 如果变量等于值1，要执行的语句
    break; // 表示退出switch，不判断后边的了。
  case <值2>:
    // 如果变量等于值2，要执行的语句
    break; // 表示退出switch，不判断后边的了。
  default:
    // 如果前面的都不符合，就执行这里的
    break; // 表示退出switch，不判断后边的了。
}
```
## 函数式编程
这里的函数式编程只是指管道编程，其实我这个软件的绘图，不同的线就代表

## 类
约定
   - <access modifier> 访问标识符
   - <data type> 数据类型
   - <return type> 返回类型

```
<access modifier> class class_name{
  // 成员变量
  <access modifier> <data type> variable1;
  // 成员方法
  <access modifier> <return type> method1(parameter_list)
  {

  }
  // 构造函数，跟成员方法的区别是，没有返回类型，且名字固定是类名。
  <access modifier>class_name(parameter_list){

  }

}
```
### 简单介绍类
#### 类
比如一个类是银行卡类BankAccount，
   - 属性有卡号、户名和金额，
   - 操作有开户销户，提现存款等。  

这个就可以构成一个类。
#### 类的继承
比如一个信用卡类继承自银行卡类，就继承了他的属性和操作。
#### 多态
信用卡类继承了银行账户类，但其提现和存款的操作是不同的（手续费不同），信用卡类需要实现自己的提现取款，这种不同被成为多态。
#### 抽象 abstract
然后还有借记卡，信用卡账号和借记卡应该平级的，不存在继承关系，这个模型的银行卡类应该是一个抽象的类，比如开户销户，提现取款等操作，只是有名字，但没有实现相关的操作。其实一开始设计的时候，应该首先提取出抽象的类，然后再用继承多态的方式
#### 接口 interface
接口是最高的抽象，其方法默认是抽象的方法，且没有属性等。  
**接口编程，首先设计最顶层的抽象类或者接口，然后一层一层的实现**

# 几个例子
## 斐波那契数列
这个是一个典型的递归
## 查询某文件夹大于1M的文件
管道应用的典型
## 查询某文件夹大于1M的文件的linq版本