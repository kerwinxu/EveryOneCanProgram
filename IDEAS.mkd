# 2023-4-2
整理需求，今天看了一下傅里叶变换，在学校的时候是学过，但已经好久没有看高等数学了，关于算法实现的部分，我看了Octave的实现，我看了别人关于matlab跟计算机语言的区别，大体意思是matlab是研究工具，而c等计算机语言是构建工具，我学过lisp，这个应该是偏向研究工具多一些，构建工具构建程序，面向过程面向对象，主要是想将大问题分解成小问题，将复杂度降低，还得考虑运行效率之类的东西，甚至界面方面都要考虑，对程序员，代码是产品，所以要有质量和效率的考量，而matlab，代码的执行结果才是产品，只要有结果，而怎么来的，当然是越省越好。关于racket，我用过，据说他们的目标是学校研究用，这个lisp，简单的语法，却能组成非常复杂的操作，只是他们并没有规范起来，比如规范出一个fft的函数以供大家调用，大家都造轮子，会很累的。  
我这个是面向不太懂程序的普通人，像lisp那样，只要几个基础的语句，然后加上一堆的库，就可以创建程序，而这些库，我想要现成的，不想自己造轮子。有如下几个计算机语言，  
   - c# ： 主要是我用的多，并且库也挺多的。
   - java ： 这个不多说了，真的太多了。
   - python ： 我也经常用这个。
   - js     ： npm，vue之类的，库也挺多的，只是我很少用。

这里就不考虑qt，原因是c和c++的库，对普通人来说，安装都是个问题，但pyside6可以考虑。

# 2023-3-12
还是整理需求，我的目标是让普通人也能够快速的编程，所以想到用图形来做，比如一个例子，我想寻找电脑某个目录中大于某个大小的文件，我可以用shell或者powershell快速的编写出相关的代码，但对于普通人，还是鼠标好用些。  
我的目标是实现一个powershell吧，普通人用不到编程的，底层的还是交给程序员。  
定位需求太难了，如果是完全版本的c#，我是一个人，还要养家糊口，完成有难度，所以我定位是在个人电脑上运行，可以帮助个人快速的实现简单的操作的，比如上边的示例，寻找某个目录中大于某个大小的文件，让不懂shell的人也可以轻松的搞定，还比如批量处理某些文本或者文档，也可以快速的搞定。说起文本，openxml操作十分困难啊，还是python好。  
初始目标是不变的，够简单易用，也很强大。

# 2023-3-
今天看了一下Roslyn，可以动态的根据源代码编译程序，我的需要是，这个是一个动态的软件，可以动态的更改程序，也可以编译成可执行文件。要求界面尽量简单，也要求可以有强大的功能。
# 2023-3-7
在程序中，可以动态的创建语法树，也可以动态的创建控件，关于控件的属性，我这里暂时只是取最少量的吧。
# 2023-3-6
今天创建了一个空白的wpf项目，net6平台的，要支持多语言。
# 2023-3-4
我再次整理一下需求，我需要做到如下的
   - 图形编程
     - 过程编程
     - 面向对象编程
     - 函数式编程

我想过如下的方式去实现
   - c# 好处是有个wpf（mvvm）和powershell 。
   - pyside6：好处是背靠python。
   - vue    ：好处是mvvm，以及背靠js

我这里还是将所有的目标做一下整理，看看选择哪个语言,我的目标是，通过在屏幕上画几下，就可以编写程序，最基本的应该是过程编程，比如条件语句，循环语句，在这方面，我好像缺少c#方面的ast，要找一下，在这方面，python的优势巨大，关于mvvm方面，可以通过图形自动的更改。  
这里顺便加入可以在wpf的listbox中添加多个样式的例子 [https://stackoverflow.com/questions/20090798/need-multiple-styles-dependent-on-listboxitem](https://stackoverflow.com/questions/20090798/need-multiple-styles-dependent-on-listboxitem)  
我打算进行一半的图形，图形中的表达式往往可以是文本形式的，如果全部图形，很多表达式也得专门的图形，会很累。
canvas动态的布局控件 [结合ItemsControl在Canvas中动态添加控件的最MVVM的方式](https://www.cnblogs.com/ywei221/p/4570689.html)  
我的目标还有一个，就是可以独立的可执行程序。  
这里要找支持mvvm的，我在c#上可以做到，不同的类，选择不同的样式。vue应该也是可以的吧，但是这个要做导出的应用程序比较困难。  
所以我倾向于用c#来做(python，只是因为没有好的mvvm，如果c#解决麻烦，我会用python，绘制图片的方式去做)，现在首要的是要解决ast的问题，如下的几个方法看看效果  

|名称|网址|星级|最后更新|
|--|--|--|--|
|roslyn|https://github.com/dotnet/roslyn|17.1k|上星期|

我打算用net6.0，一个长期支持的架构，关于语法分析，我用的是“NET Compiler Platform SDK”，我会尽量用成熟的框架来做这个程序，比如wpf的mvvm，比如这个语法分析，协议要求是可以支持我的Apache协议，我保留版权。  
还有这个虽说目标是给不懂编程的人用的，但是，也要预留接口给强大的企业应用，包括保密之类的，这个会在抽象的层次上给出接口。
核心思路是语法树，我有写过lisp（scheme），基本上是编写语法树。
教程来源于： [.NET Compiler Platform SDK](https://learn.microsoft.com/zh-cn/dotnet/csharp/roslyn-sdk/)  
但这教程实在是简略，我整理一下,我这里只是做精简版的，毕竟目标不是专业人士。   
既然是精简版的，可以支持如下的  


   - SyntaxTree tree = CSharpSyntaxTree.ParseText(programText);   // 这个是语法树
   - CompilationUnitSyntax root = tree.GetCompilationUnitRoot();  // 获得的根节点
   - foreach (SyntaxNode? item in root.ChildNodes())                      // ChildNodes是取得所有的子节点。
   - SyntaxNode ： 语法的节点，感觉这个是词法的。
     - 重要属性
       - FullSpan ：此节点的绝对跨度（以字符为单位，包括其前导和尾随琐事）
       - Parent   ： 在其集合中包含此节点的 ChildNodes() 节点。
       - KindText ： 表示语法树中的非终端节点
         - UsingDirective ： 这个是using语句
         - NamespaceDeclaration ： 定义空间的
         - ClassDeclaration     ： 这个表示这个是一个类
           - Members ： 成员
             - PropertyDeclaration  ： 属性
             - MethodDeclaration    ： 方法
     - 重要方法
       - ChildNodes() ： 获取前缀文档顺序中的子节点的列表。
       - ChildTokens() ： 获取此节点的直接子令牌的列表。
       - 







# 2022-1-19
因为文字的高亮方面不太好控制，我这里倾向于更多的图形来编程，并且界面有固定的限制，本软件编写的程序倾向于小而美的代码。  
参考如下的图片  
![](Syntax_diagram_example.svg)  

   - 条件语句
     - if是这样子的
   - 循环语句
     - while
     - for
   - 函数
     - 示例中是没有名字的参数，可以分成2种显示方式
       - 一种是链接的方式
       - 一种是包含在内的方式 ： 这种取消了。

重要： 
   - 长方形的含义是不同的，或许是一个表达式，或许是多行语句（但这个必须得是一个缩进的）。 
   - 为了避免perl的同一个问题不同的解决方式，我这里统一一下，同一个图形界面跟代码是唯一的，不允许自定义图形界面中元素（以后的可视化控件除外）的位置。


# 2022-1-12
目标定位，小学生乃至幼儿园的，减少复杂性，不是存粹图形，而是图形+文字的方式编程，这个相当于图形编程和文字编程之间的过渡，最外层是类似uml的，显示各个类之间的关系，内层是面向过程的，还有自定义的，比如scrapy这个爬虫，是分成几个组件，组件有关联，我的这个软件可以显示这些关联，且在一个图形界面上就足够完成所有的操作，再比如tensorflow，我争取只是用图形就能够完成网络设计。  
比如如下是Scrapy的数据流，  
![Scrapy的数据流](./resource/img/scrapy_dataflow.png)  
我会做一个类似的图片，然后显示所有的item和其他的，流的动向很清楚，从总体上把握。
2022-1-9-2： 草稿，我想象中的界面是：大部分情况下只用操作画布就可以，会显示属性，有如下按钮之类的
   - 项目或者文件夹相关
     - 打开
     - 保存
     - 另存为
# 2022-1-9
首先确定一下需求，我的需求是要尽可能的简单，我打算分成如下两大部分
   - 面向过程部分
     - 结构
       - 顺序结构
       - 条件结构
       - 循环结构
     - 各个结构的图形可以互相连接。
   - 面向对象部分
     - 类
       - 字段
       - 方法
       - 属性：特殊的方法
       - 继承
总体上是分层次显示，比如最外层仅仅显示类和类的属性方法等，只有点开某个具体的方法才显示具体的面向过程信息。
总体上：最外层是面向过程和面向对象，内层的是面向过程,其实uml也是这样子的。

# 2022-1-2
新思路，我原先是想要用c#实现的，毕竟我经常用c#，不过c#好像并没有好的生成语法树，后来看到java有开源的生成语法树的，就想用java来做了，但后来想想，还是用python做吧，最主要还是其简单，我用ast来做，先做一个开头，1.0版本的用python，2.0的用java，并且0.5版本前的不具备动态执行的能力，先易后难。
关于界面方面，一开始我想用pyqt，后来想想协议不怎么好，后来想用tkinter，但好像绘图的不怎么好，最后我决定用pygame，嗯，并且这个有很多其他的库，并且tkinter和pygame是可以结合的。
经过我测试，tkinter和pygame都有自己的消息系统，这两个不方便结合，我这里看到有别的方式可以实现，就是PGU - Phil's pyGame Utilities。
这个pygame2跟tkinter不怎么兼容，所以这里我用PySide2来实现吧,也不用pygame了，这个是LGPL协议，对商业比较友好。


**我的目标是做一个软件，纯粹用图形来编程，并且有一个版本是可以动态执行的，最重要的是尽量简单。**




以前：目标，我这个程序目标是让小学生都可以操作编程，可以方便编程以及批处理，界面组件可以方便
分类：
    面向对象： 也就是类啦。
    面向过程： 
        支持变量类型。
        支持顺序语句，循环语句和分支语句。

我要精简一下uml，urml有如下的图
    - 用例图
    - 类图
    - 顺序图/时序图：从计算机的角度描述用例
    - 协作图
    - 状态图
    - 活动图：流程图或者带泳道的活动图。

我接下来看看都需要什么操作吧，我直接看看java的语法树都有什么吧。